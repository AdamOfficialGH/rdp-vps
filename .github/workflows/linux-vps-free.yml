name: Linux VPS (No Ngrok Required - FREE)

on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Duration in hours (max 6)'
        required: false
        default: '6'
        type: string
      password:
        description: 'Custom SSH password (optional)'
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours max

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH Server
      run: |
        # Update system
        sudo apt-get update
        
        # Install SSH server
        sudo apt-get install -y openssh-server
        
        # Configure SSH
        sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
        sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
        sudo sed -i 's/#Port 22/Port 22/' /etc/ssh/sshd_config
        
        # Set password for runner user
        password="${{ github.event.inputs.password }}"
        if [ -z "$password" ]; then
          password="${{ secrets.SSH_PASSWORD }}"
        fi
        if [ -z "$password" ]; then
          password="P@ssw0rd123!"
        fi
        
        echo "runner:$password" | sudo chpasswd
        
        # Start SSH service
        sudo systemctl start ssh
        sudo systemctl enable ssh
        
        echo "SSH server configured successfully!"
        echo "Username: runner"
        echo "Password: $password"

    - name: Install Essential Software
      run: |
        # Update package list
        sudo apt-get update
        
        # Install development tools
        sudo apt-get install -y \
          curl \
          wget \
          git \
          vim \
          nano \
          htop \
          tree \
          unzip \
          zip \
          build-essential \
          software-properties-common \
          apt-transport-https \
          ca-certificates \
          gnupg \
          lsb-release \
          net-tools \
          telnet \
          nmap
        
        # Install Node.js
        curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
        sudo apt-get install -y nodejs
        
        # Install Python pip
        sudo apt-get install -y python3-pip
        
        # Install Docker
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo usermod -aG docker runner
        
        # Install Docker Compose
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Setup Free Tunnel using Serveo
      run: |
        echo "🚀 Setting up FREE SSH tunnel using Serveo..."
        
        # Generate random subdomain
        subdomain="vps-$(shuf -i 1000-9999 -n 1)"
        
        # Start SSH reverse tunnel to serveo.net (FREE service)
        ssh -o StrictHostKeyChecking=no -R $subdomain:22:localhost:22 serveo.net &
        
        # Wait for tunnel to establish
        sleep 10
        
        echo "=================================="
        echo "🎉 FREE VPS IS READY!"
        echo "=================================="
        echo "SSH Host: $subdomain.serveo.net"
        echo "SSH Port: 22"
        echo "Username: runner"
        password="${{ github.event.inputs.password }}"
        if [ -z "$password" ]; then
          password="${{ secrets.SSH_PASSWORD }}"
        fi
        if [ -z "$password" ]; then
          password="P@ssw0rd123!"
        fi
        echo "Password: $password"
        echo "=================================="
        echo ""
        echo "📋 SSH Command:"
        echo "ssh runner@$subdomain.serveo.net"
        echo ""
        echo "📋 SCP Upload Example:"
        echo "scp file.txt runner@$subdomain.serveo.net:~/"
        echo ""
        echo "📋 SCP Download Example:"
        echo "scp runner@$subdomain.serveo.net:~/file.txt ./"
        echo ""
        echo "⏰ Session will last for ${{ github.event.inputs.duration || '6' }} hours"
        echo "=================================="

    - name: Setup Alternative Tunnel using LocalTunnel
      run: |
        echo "🔄 Setting up alternative tunnel using LocalTunnel..."
        
        # Install localtunnel
        npm install -g localtunnel
        
        # Start localtunnel for SSH
        subdomain2="ssh-$(shuf -i 1000-9999 -n 1)"
        npx lt --port 22 --subdomain $subdomain2 &
        
        sleep 5
        
        echo "=================================="
        echo "🌐 ALTERNATIVE ACCESS (LocalTunnel):"
        echo "=================================="
        echo "URL: https://$subdomain2.loca.lt"
        echo "Note: This is HTTPS tunnel, need TCP client"
        echo "=================================="

    - name: Display System Information
      run: |
        echo ""
        echo "🖥️  SYSTEM INFORMATION"
        echo "=================================="
        echo "OS: $(lsb_release -d | cut -f2)"
        echo "Kernel: $(uname -r)"
        echo "CPU: $(nproc) cores"
        echo "Memory: $(free -h | grep '^Mem:' | awk '{print $2}')"
        echo "Disk: $(df -h / | tail -1 | awk '{print $2}')"
        echo "Public IP: $(curl -s https://ipinfo.io/ip)"
        echo "=================================="
        echo ""
        echo "📦 INSTALLED SOFTWARE"
        echo "=================================="
        echo "Node.js: $(node --version 2>/dev/null || echo 'Not installed')"
        echo "npm: $(npm --version 2>/dev/null || echo 'Not installed')"
        echo "Python: $(python3 --version 2>/dev/null || echo 'Not installed')"
        echo "pip: $(pip3 --version 2>/dev/null || echo 'Not installed')"
        echo "Docker: $(docker --version 2>/dev/null || echo 'Not installed')"
        echo "Git: $(git --version 2>/dev/null || echo 'Not installed')"
        echo "=================================="

    - name: Keep session alive
      run: |
        duration=${{ github.event.inputs.duration || '6' }}
        end_time=$(date -d "+${duration} hours" +%s)
        
        echo "🔄 Keeping session alive until $(date -d "+${duration} hours" '+%Y-%m-%d %H:%M:%S')"
        
        while [ $(date +%s) -lt $end_time ]; do
          current_time=$(date '+%H:%M:%S')
          remaining_minutes=$(( (end_time - $(date +%s)) / 60 ))
          
          echo "⏰ Session active - $current_time - Remaining: $remaining_minutes minutes"
          
          # Check SSH service
          if ! systemctl is-active --quiet ssh; then
            echo "⚠️ SSH service is down, restarting..."
            sudo systemctl restart ssh
          fi
          
          # Check if serveo tunnel is still active
          if ! pgrep -f "serveo.net" > /dev/null; then
            echo "⚠️ Serveo tunnel died, restarting..."
            subdomain="vps-$(shuf -i 1000-9999 -n 1)"
            ssh -o StrictHostKeyChecking=no -R $subdomain:22:localhost:22 serveo.net &
            echo "🔄 New tunnel: $subdomain.serveo.net"
          fi
          
          sleep 300  # Wait 5 minutes
        done
        
        echo "⏰ Session time expired. Shutting down..."

    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up..."
        pkill -f serveo.net || true
        pkill -f localtunnel || true
        sudo systemctl stop ssh || true
        echo "✅ Cleanup completed"
