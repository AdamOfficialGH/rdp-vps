name: Ubuntu Desktop (VNC)

on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Duration in hours (max 6)'
        required: false
        default: '6'
        type: string
      vnc_password:
        description: 'VNC password (optional)'
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours max

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Ubuntu Desktop Environment
      run: |
        # Update system
        sudo apt-get update
        
        # Install desktop environment (XFCE - lightweight)
        sudo apt-get install -y xfce4 xfce4-goodies
        
        # Install VNC server
        sudo apt-get install -y tightvncserver
        
        # Install essential applications
        sudo apt-get install -y \
          firefox \
          chromium-browser \
          libreoffice \
          gedit \
          file-manager \
          terminal \
          git \
          curl \
          wget \
          vim \
          nano \
          htop \
          tree \
          unzip \
          zip

    - name: Configure VNC Server
      run: |
        # Set VNC password
        vnc_password="${{ github.event.inputs.vnc_password }}"
        if [ -z "$vnc_password" ]; then
          vnc_password="${{ secrets.VNC_PASSWORD }}"
        fi
        if [ -z "$vnc_password" ]; then
          vnc_password="vnc123456"
        fi
        
        # Create VNC password file
        mkdir -p ~/.vnc
        echo "$vnc_password" | vncpasswd -f > ~/.vnc/passwd
        chmod 600 ~/.vnc/passwd
        
        # Create VNC startup script
        cat > ~/.vnc/xstartup << 'EOF'
#!/bin/bash
xrdb $HOME/.Xresources
startxfce4 &
EOF
        chmod +x ~/.vnc/xstartup
        
        echo "VNC server configured with password: $vnc_password"

    - name: Install Development Tools
      run: |
        # Install Node.js
        curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
        sudo apt-get install -y nodejs
        
        # Install Python tools
        sudo apt-get install -y python3-pip python3-venv
        
        # Install VS Code
        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
        sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
        sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
        sudo apt-get update
        sudo apt-get install -y code
        
        # Install Docker
        curl -fsSL https://get.docker.com -o get-docker.sh
        sudo sh get-docker.sh
        sudo usermod -aG docker runner

    - name: Start VNC Server
      run: |
        # Start VNC server on display :1
        vncserver :1 -geometry 1920x1080 -depth 24
        
        echo "VNC server started on display :1"
        echo "Resolution: 1920x1080"
        echo "Color depth: 24-bit"

    - name: Setup Ngrok for VNC
      run: |
        # Download and setup ngrok
        wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar xvzf ngrok-v3-stable-linux-amd64.tgz
        sudo mv ngrok /usr/local/bin/
        
        # Configure ngrok
        ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        
        # Start ngrok tunnel for VNC (port 5901 for display :1)
        nohup ngrok tcp 5901 > /dev/null 2>&1 &
        sleep 10

    - name: Get VNC Connection Info
      run: |
        # Get tunnel information
        max_attempts=10
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt to get tunnel info..."
          
          tunnel_info=$(curl -s http://localhost:4040/api/tunnels 2>/dev/null || echo "")
          
          if [ -n "$tunnel_info" ]; then
            tunnel_url=$(echo "$tunnel_info" | grep -o '"public_url":"tcp://[^"]*"' | sed 's/"public_url":"tcp:\/\///' | sed 's/"//')
            
            if [ -n "$tunnel_url" ]; then
              host=$(echo "$tunnel_url" | cut -d':' -f1)
              port=$(echo "$tunnel_url" | cut -d':' -f2)
              
              vnc_password="${{ github.event.inputs.vnc_password }}"
              if [ -z "$vnc_password" ]; then
                vnc_password="${{ secrets.VNC_PASSWORD }}"
              fi
              if [ -z "$vnc_password" ]; then
                vnc_password="vnc123456"
              fi
              
              echo "=================================="
              echo "üñ•Ô∏è  UBUNTU DESKTOP IS READY!"
              echo "=================================="
              echo "VNC Host: $host"
              echo "VNC Port: $port"
              echo "VNC Password: $vnc_password"
              echo "=================================="
              echo ""
              echo "üìã VNC Connection:"
              echo "Host: $host:$port"
              echo "Password: $vnc_password"
              echo ""
              echo "üîß VNC Clients:"
              echo "‚Ä¢ Windows: TightVNC, RealVNC, UltraVNC"
              echo "‚Ä¢ macOS: Screen Sharing, VNC Viewer"
              echo "‚Ä¢ Linux: Remmina, TigerVNC, Vinagre"
              echo "‚Ä¢ Web: noVNC (if available)"
              echo ""
              echo "‚è∞ Session will last for ${{ github.event.inputs.duration || '6' }} hours"
              echo "=================================="
              break
            fi
          fi
          
          echo "Waiting for ngrok tunnel... ($attempt/$max_attempts)"
          sleep 5
          attempt=$((attempt + 1))
        done

    - name: Display Desktop Information
      run: |
        echo ""
        echo "üñ•Ô∏è  DESKTOP INFORMATION"
        echo "=================================="
        echo "Desktop Environment: XFCE4"
        echo "Resolution: 1920x1080"
        echo "Color Depth: 24-bit"
        echo "VNC Display: :1"
        echo "VNC Port: 5901"
        echo "=================================="
        echo ""
        echo "üì¶ INSTALLED SOFTWARE"
        echo "=================================="
        echo "Firefox: $(firefox --version 2>/dev/null || echo 'Not installed')"
        echo "Chromium: $(chromium-browser --version 2>/dev/null || echo 'Not installed')"
        echo "VS Code: $(code --version 2>/dev/null | head -1 || echo 'Not installed')"
        echo "LibreOffice: $(libreoffice --version 2>/dev/null || echo 'Not installed')"
        echo "Node.js: $(node --version 2>/dev/null || echo 'Not installed')"
        echo "Python: $(python3 --version 2>/dev/null || echo 'Not installed')"
        echo "Docker: $(docker --version 2>/dev/null || echo 'Not installed')"
        echo "Git: $(git --version 2>/dev/null || echo 'Not installed')"
        echo "=================================="

    - name: Keep session alive
      run: |
        duration=${{ github.event.inputs.duration || '6' }}
        end_time=$(date -d "+${duration} hours" +%s)
        
        echo "üîÑ Keeping desktop session alive until $(date -d "+${duration} hours" '+%Y-%m-%d %H:%M:%S')"
        
        while [ $(date +%s) -lt $end_time ]; do
          current_time=$(date '+%H:%M:%S')
          remaining_minutes=$(( (end_time - $(date +%s)) / 60 ))
          
          echo "‚è∞ Desktop active - $current_time - Remaining: $remaining_minutes minutes"
          
          # Check if VNC server is running
          if ! pgrep -f "Xvnc.*:1" > /dev/null; then
            echo "‚ö†Ô∏è VNC server died, restarting..."
            vncserver :1 -geometry 1920x1080 -depth 24
          fi
          
          # Check if ngrok is running
          if ! pgrep -x "ngrok" > /dev/null; then
            echo "‚ö†Ô∏è Ngrok process died, restarting..."
            nohup ngrok tcp 5901 > /dev/null 2>&1 &
            sleep 10
          fi
          
          sleep 300  # Wait 5 minutes
        done
        
        echo "‚è∞ Session time expired. Shutting down..."

    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up..."
        vncserver -kill :1 || true
        pkill -f ngrok || true
        echo "‚úÖ Cleanup completed"
